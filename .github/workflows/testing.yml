name: Java Unit/Integration Testing with Maven

permissions:
  id-token: write
  contents: read

on:
  push:
  pull_request:

jobs:
  # Label of the container job
  container-job:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:10.18-jessie

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
  testing:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./beanfinancetracker-server
    steps:
    # Downloads a copy of the code in your repository before running CI tests
    - name: Check out repository code
      uses: actions/checkout@v4

    # Performs a clean installation of all dependencies in the `package.json` file
    # For more information, see https://docs.npmjs.com/cli/ci.html
    - name: Install dependencies
      run: npm ci

    - name: Connect to PostgreSQL
      # Runs a script that creates a PostgreSQL table, populates
      # the table with data, and then retrieves the data.
      run: node client.js
      # Environment variable used by the `client.js` script to create
      # a new PostgreSQL client.
      env:
        # The hostname used to communicate with the PostgreSQL service container
        POSTGRES_HOST: postgres
        # The default PostgreSQL port
        POSTGRES_PORT: 5432      

     # checkout repo
    - name: 'Checkout'
      uses: actions/checkout@main

    # configure credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{secrets.AWS_ASSUME_ROLE}}
        aws-region: "eu-west-1"

    - name: Set up AWS CLI
      uses: unfor19/install-aws-cli-action@v1

    # set up Java
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'corretto'
        cache: maven

    # Pull environment config from S3
    - name: Retrieve environment variables file
      run: aws s3 cp s3://${{secrets.ENV_BUCKET_NAME}}/${{secrets.TEST_SERVER_ENV_OBJECT_KEY}}/env.properties
  
    - name: Run Unit Tests
      run: mvn test
